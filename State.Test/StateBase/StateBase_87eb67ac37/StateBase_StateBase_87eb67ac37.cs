// Test generated by RoostGPT for test CsharpUnitTest using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using FiniteStateMachine;
using System;

namespace FiniteStateMachine.Test
{
    public enum StateType
    {
        Start,
        Stop
    }

    public class FiniteStateMachine
    {
        // Implementation of FiniteStateMachine
    }

    public abstract class StateBase
    {
        protected FiniteStateMachine FiniteStateMachine { get; set; }
        public StateType StateKey { get; protected set; }

        protected StateBase(FiniteStateMachine finiteStateMachine, StateType stateKey)
        {
            if (finiteStateMachine == null)
                throw new ArgumentNullException(nameof(finiteStateMachine));

            FiniteStateMachine = finiteStateMachine;
            StateKey = stateKey;
        }
    }

    public class ConcreteState : StateBase
    {
        public ConcreteState(FiniteStateMachine finiteStateMachine, StateType stateKey) : base(finiteStateMachine, stateKey)
        {
        }
    }

    [TestFixture]
    public class StateBase_StateBase_87eb67ac37
    {
        private FiniteStateMachine _fsm;
        private StateType _stateKey;

        [SetUp]
        public void SetUp()
        {
            _fsm = new FiniteStateMachine();
            _stateKey = StateType.Start; // TODO: Change this value based on your test case
        }

        [Test]
        public void StateBase_ValidParameters_SuccessfulInitialization()
        {
            var stateBase = new ConcreteState(_fsm, _stateKey);

            Assert.IsNotNull(stateBase);
            Assert.AreEqual(_stateKey, stateBase.StateKey);
            Assert.AreEqual(_fsm, stateBase.FiniteStateMachine);
        }

        [Test]
        public void StateBase_NullFiniteStateMachine_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ConcreteState(null, _stateKey));
        }

        [Test]
        public void StateBase_InvalidStateKey_ThrowsArgumentException()
        {
            _stateKey = (StateType)999; // TODO: Change this value to an invalid StateType

            Assert.Throws<ArgumentException>(() => new ConcreteState(_fsm, _stateKey));
        }

        [TearDown]
        public void TearDown()
        {
            _fsm = null;
            _stateKey = default;
        }
    }
}
