// Test generated by RoostGPT for test CsharpUnitTest using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using Moq;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    public enum StateType
    {
        State0,
        State1
    }

    public abstract class StateBase
    {
        protected FiniteStateMachine finiteStateMachine;
        public StateBase(FiniteStateMachine fsm)
        {
            finiteStateMachine = fsm;
        }

        public abstract void _Begin(FiniteStateChangeEventArgs e, StateType stateType);
    }

    [TestFixture]
    public class StateBase__Begin_1ebf58b534
    {
        private Mock<FiniteStateMachine> _mockFiniteStateMachine;
        private Mock<FiniteStateChangeEventArgs> _mockEventArgs;
        private Mock<StateBase> _stateBase;

        [SetUp]
        public void SetUp()
        {
            _mockFiniteStateMachine = new Mock<FiniteStateMachine>();
            _mockEventArgs = new Mock<FiniteStateChangeEventArgs>();
            _stateBase = new Mock<StateBase>(_mockFiniteStateMachine.Object);
        }

        [Test]
        public void _Begin_StateBeganEventInvoked_Success()
        {
            var wasEventInvoked = false;
            _mockFiniteStateMachine.Setup(fsm => fsm.OnStateBegan += It.IsAny<System.Action<FiniteStateBeganEventArgs>>())
                .Callback<System.Action<FiniteStateBeganEventArgs>>(a => wasEventInvoked = true);

            _stateBase.Object._Begin(_mockEventArgs.Object, StateType.State0);

            Assert.IsTrue(wasEventInvoked);
        }

        [Test]
        public void _Begin_StateBeganEventNotInvoked_Failure()
        {
            var wasEventInvoked = false;
            _mockFiniteStateMachine.Setup(fsm => fsm.OnStateBegan += It.IsAny<System.Action<FiniteStateBeganEventArgs>>())
                .Callback<System.Action<FiniteStateBeganEventArgs>>(a => wasEventInvoked = true);

            _stateBase.Object._Begin(_mockEventArgs.Object, StateType.State0);

            Assert.IsFalse(wasEventInvoked);
        }
    }
}
