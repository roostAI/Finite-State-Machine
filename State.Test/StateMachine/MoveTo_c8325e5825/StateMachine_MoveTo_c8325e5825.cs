// Test generated by RoostGPT for test CsharpUnitTest using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using FiniteStateMachine;
using System;
using System.Collections.Generic;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateMachine_MoveTo_c8325e5825
    {
        private StateMachine<string> _stateMachine;
        private Dictionary<string, State<string>> _states;
        
        [SetUp]
        public void SetUp()
        {
            _states = new Dictionary<string, State<string>>();
            _stateMachine = new StateMachine<string>(_states);
        }

        [Test]
        public void MoveTo_StateDoesNotExist_ThrowsException()
        {
            Assert.Throws<Exception>(() => _stateMachine.MoveTo("nonexistentState"));
        }

        [Test]
        public void MoveTo_StateExists_ReturnsCorrectStateKey()
        {
            var state = new State<string>("testState");
            _states.Add(state.StateKey, state);

            var result = _stateMachine.MoveTo(state.StateKey);

            Assert.AreEqual(state.StateKey, result);
        }

        [Test]
        public void MoveTo_CurrentStateNotNull_CallsEndOnCurrentState()
        {
            var state1 = new State<string>("state1");
            var state2 = new State<string>("state2");
            _states.Add(state1.StateKey, state1);
            _states.Add(state2.StateKey, state2);

            _stateMachine.MoveTo(state1.StateKey);
            _stateMachine.MoveTo(state2.StateKey);

            Assert.IsTrue(state1.EndCalled);
        }

        [Test]
        public void MoveTo_CurrentStateNotNull_CallsBeginOnNewState()
        {
            var state1 = new State<string>("state1");
            var state2 = new State<string>("state2");
            _states.Add(state1.StateKey, state1);
            _states.Add(state2.StateKey, state2);

            _stateMachine.MoveTo(state1.StateKey);
            _stateMachine.MoveTo(state2.StateKey);

            Assert.IsTrue(state2.BeginCalled);
        }
    }
}
