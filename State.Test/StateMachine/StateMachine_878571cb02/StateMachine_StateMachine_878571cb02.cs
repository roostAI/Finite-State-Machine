// Test generated by RoostGPT for test CsharpUnitTest using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using FiniteStateMachine;
using System.Collections.Generic;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateMachine_StateMachine_878571cb02
    {
        private StateMachine<State<string>> _stateMachine;

        [SetUp]
        public void SetUp()
        {
            _stateMachine = new StateMachine<State<string>>();
        }

        [Test]
        public void StateMachine_Constructor_SuccessfulCreation_StatesDictionaryNotNull()
        {
            Assert.IsNotNull(_stateMachine.States);
        }

        [Test]
        public void StateMachine_Constructor_SuccessfulCreation_StatesDictionaryIsEmpty()
        {
            Assert.IsEmpty(_stateMachine.States);
        }

        [Test]
        public void StateMachine_AddState_StateAdded_StatesDictionaryCountIncreases()
        {
            int initialCount = _stateMachine.States.Count;
            _stateMachine.AddState("TestState", new State<string>("TestState"));
            Assert.AreEqual(initialCount + 1, _stateMachine.States.Count);
        }

        [Test]
        public void StateMachine_AddState_StateAlreadyExists_StatesDictionaryCountDoesNotIncrease()
        {
            _stateMachine.AddState("TestState", new State<string>("TestState"));
            int initialCount = _stateMachine.States.Count;
            _stateMachine.AddState("TestState", new State<string>("TestState"));
            Assert.AreEqual(initialCount, _stateMachine.States.Count);
        }

        [Test]
        public void StateMachine_RemoveState_StateDoesNotExist_StatesDictionaryCountDoesNotDecrease()
        {
            int initialCount = _stateMachine.States.Count;
            _stateMachine.RemoveState("NonExistentState");
            Assert.AreEqual(initialCount, _stateMachine.States.Count);
        }

        [Test]
        public void StateMachine_RemoveState_StateExists_StatesDictionaryCountDecreases()
        {
            _stateMachine.AddState("TestState", new State<string>("TestState"));
            int initialCount = _stateMachine.States.Count;
            _stateMachine.RemoveState("TestState");
            Assert.AreEqual(initialCount - 1, _stateMachine.States.Count);
        }
    }
}
